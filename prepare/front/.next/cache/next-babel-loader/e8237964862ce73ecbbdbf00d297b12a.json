{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addPost\", data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/loadPosts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // POST reducer 조작부분\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    }); // USER reducer 조작부분\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","LOAD_POSTS_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","loadPostsAPI","get","loadPosts","removePostAPI","delete","removePost","console","error","addCommentAPI","postId","addComment","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"sources":["D:/Document/react/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  LOAD_POSTS_REQUEST,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/addPost\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/loadPosts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n\r\n    yield put({\r\n      //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    }); // POST reducer 조작부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    }); // USER reducer 조작부분\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}