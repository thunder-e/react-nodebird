{"ast":null,"code":"import { all, fork, takeLatest, put, delay, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction likePostAPI(data) {\n  return axios.get(\"/posts\", data);\n}\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction unlikePostAPI(data) {\n  return axios.get(\"/posts\", data);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // POST reducer 조작부분\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    }); // USER reducer 조작부분\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"result : \", result);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","likePostAPI","data","get","likePost","action","result","type","err","response","unlikePostAPI","unlikePost","addPostAPI","post","content","addPost","id","generate","loadPostsAPI","loadPosts","removePostAPI","delete","removePost","console","error","addCommentAPI","postId","addComment","log","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["D:/Document/react/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeLatest,\r\n  put,\r\n  delay,\r\n  throttle,\r\n  call,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  generateDummyPost,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.get(\"/posts\", data);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.get(\"/posts\", data);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/posts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n\r\n    yield put({\r\n      //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    }); // POST reducer 조작부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    }); // USER reducer 조작부분\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n\r\n    console.log(\"result : \", result);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPosts),\r\n    fork(watchAddPost),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}