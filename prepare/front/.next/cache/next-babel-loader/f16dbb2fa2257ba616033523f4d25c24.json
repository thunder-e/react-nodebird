{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\n\n//async action creator\n\n//action creator\nconst changeNickname = data => {\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data\n  };\n};\nchangeNickname(\"thun\");\n// {\n//     type: \"CHANGE_NAME\",\n//     data: 'thun'\n// }\n\n//(이전상태, 액션) => 다음상태\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case \"HYDRATE\":\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      default:\n        return state;\n    }\n  },\n  //HYDRATE를 위한 index reducer (HYDRATE :  리덕스 서버사이드 렌더링을 위함)\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","combineReducers","user","post","changeNickname","data","type","rootReducer","index","state","action","console","log","payload"],"sources":["D:/Document/react/react-nodebird/prepare/front/reducers/index.js"],"sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport { combineReducers } from \"redux\";\r\nimport user from \"./user\";\r\nimport post from \"./post\";\r\n\r\n//async action creator\r\n\r\n//action creator\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data,\r\n  };\r\n};\r\n\r\nchangeNickname(\"thun\");\r\n// {\r\n//     type: \"CHANGE_NAME\",\r\n//     data: 'thun'\r\n// }\r\n\r\n//(이전상태, 액션) => 다음상태\r\nconst rootReducer = combineReducers({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"HYDRATE\":\r\n        console.log(\"HYDRATE\", action);\r\n        return { ...state, ...action.payload };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }, //HYDRATE를 위한 index reducer (HYDRATE :  리덕스 서버사이드 렌더링을 위함)\r\n  user,\r\n  post,\r\n});\r\n\r\nexport default rootReducer;\r\n"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,eAAe,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,QAAQ;;AAEzB;;AAEA;AACA,MAAMC,cAAc,GAAIC,IAAI,IAAK;EAC/B,OAAO;IACLC,IAAI,EAAE,iBAAiB;IACvBD;EACF,CAAC;AACH,CAAC;AAEDD,cAAc,CAAC,MAAM,CAAC;AACtB;AACA;AACA;AACA;;AAEA;AACA,MAAMG,WAAW,GAAGN,eAAe,CAAC;EAClCO,KAAK,EAAE,CAACC,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,KAAK;IAC7B,QAAQA,MAAM,CAACJ,IAAI;MACjB,KAAK,SAAS;QACZK,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;QAC9B,uCAAYD,KAAK,GAAKC,MAAM,CAACG,OAAO;MAEtC;QACE,OAAOJ,KAAK;IAAC;EAEnB,CAAC;EAAE;EACHP,IAAI;EACJC;AACF,CAAC,CAAC;AAEF,eAAeI,WAAW"},"metadata":{},"sourceType":"module"}