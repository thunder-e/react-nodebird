{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addPost\", data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addCommentAPI, action.data);\n\n    const id = shortid.generate();\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","shortid","addPostAPI","data","post","addPost","action","type","err","response","addCommentAPI","postId","addComment","id","generate","content","watchAddPost","watchAddComment","postSaga"],"sources":["C:/KIMJIHYE/workspace/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/addPost\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addCommentAPI, action.data);\r\n\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: { id, content: action.data },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,GAAG,EAAEC,KAAK,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,QACd,kBAAkB;AACzB,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,OAAO,MAAM,SAAS;AAE7B,SAASC,UAAU,CAACC,IAAI,EAAE;EACxB,OAAOV,KAAK,CAACW,IAAI,CAAC,cAAc,EAAED,IAAI,CAAC;AACzC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACxB,IAAI;IACF,MAAMd,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMD,GAAG,CAAC;MACRgB,IAAI,EAAEZ,gBAAgB;MACtBQ,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,MAAMjB,GAAG,CAAC;MACRgB,IAAI,EAAEX,gBAAgB;MACtBO,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,SAASO,aAAa,CAACP,IAAI,EAAE;EAC3B,OAAOV,KAAK,CAACW,IAAI,CAAE,aAAYD,IAAI,CAACQ,MAAO,UAAS,EAAER,IAAI,CAAC;AAC7D;AAEA,UAAUS,UAAU,CAACN,MAAM,EAAE;EAC3B,IAAI;IACF,MAAMd,KAAK,CAAC,IAAI,CAAC;IACjB;;IAEA,MAAMqB,EAAE,GAAGZ,OAAO,CAACa,QAAQ,EAAE;IAC7B,MAAMvB,GAAG,CAAC;MACRgB,IAAI,EAAET,mBAAmB;MACzBK,IAAI,EAAE;QAAEU,EAAE;QAAEE,OAAO,EAAET,MAAM,CAACH;MAAK;IACnC,CAAC,CAAC;IACF,MAAMZ,GAAG,CAAC;MACRgB,IAAI,EAAEP,cAAc;MACpBG,IAAI,EAAEU;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOL,GAAG,EAAE;IACZ,MAAMjB,GAAG,CAAC;MACRgB,IAAI,EAAER,mBAAmB;MACzBI,IAAI,EAAEK,GAAG,CAACC,QAAQ,CAACN;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUa,YAAY,GAAG;EACvB,MAAM1B,UAAU,CAACI,gBAAgB,EAAEW,OAAO,CAAC;AAC7C;AAEA,UAAUY,eAAe,GAAG;EAC1B,MAAM3B,UAAU,CAACO,mBAAmB,EAAEe,UAAU,CAAC;AACnD;AAEA,eAAe,UAAUM,QAAQ,GAAG;EAClC,MAAM9B,GAAG,CAAC,CAACC,IAAI,CAAC2B,YAAY,CAAC,EAAE3B,IAAI,CAAC4B,eAAe,CAAC,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module"}