{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, SIGN_UP_SUCCESS, LOG_IN_FAILURE, LOG_OUT_FAILURE, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../reducers/user\";\nfunction loginAPI(data) {\n  // 3. 전달된 후\n  return axios.post(\"/api/login\", data); //4. 넘겨줌\n}\n\nfunction* logIn(action) {\n  // 1. action에서\n  try {\n    yield delay(1000);\n    //const result = yield call(loginAPI, action.data); // 2. data를 꺼내어\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n// 성공결과 : result.data\n// 실패결과 : err.response.data\n\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    //const result = yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// API는 제너레이터가 아니라는 것 주의!!!!!\nfunction signUpAPI(data) {\n  return axios.post(\"http://localhost:3065/user\", data);\n}\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction followAPI(data) {\n  return axios.post(\"/api/follow\");\n}\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(followAPI);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unfollowAPI(data) {\n  return axios.post(\"/api/unfollow\");\n}\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(unfollowAPI);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); //비동기 액션 크리에이터가 이벤트리스너같은 역할\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","call","axios","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","SIGN_UP_SUCCESS","LOG_IN_FAILURE","LOG_OUT_FAILURE","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_OUT_REQUEST","SIGN_UP_REQUEST","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","loginAPI","data","post","logIn","action","type","err","error","response","logoutAPI","logOut","signUpAPI","signUp","result","console","log","followAPI","follow","unfollowAPI","unfollow","watchLogin","watchLogOut","watchSignUp","watchFollow","watchUnfollow","userSaga"],"sources":["D:/Document/react/react-nodebird/prepare/front/sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, put, delay, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_OUT_REQUEST,\r\n  SIGN_UP_REQUEST,\r\n  FOLLOW_REQUEST,\r\n  UNFOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n} from \"../reducers/user\";\r\n\r\nfunction loginAPI(data) {\r\n  // 3. 전달된 후\r\n  return axios.post(\"/api/login\", data); //4. 넘겨줌\r\n}\r\n\r\nfunction* logIn(action) {\r\n  // 1. action에서\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(loginAPI, action.data); // 2. data를 꺼내어\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n// 성공결과 : result.data\r\n// 실패결과 : err.response.data\r\n\r\nfunction logoutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(logoutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// API는 제너레이터가 아니라는 것 주의!!!!!\r\nfunction signUpAPI(data) {\r\n  return axios.post(\"http://localhost:3065/user\", data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction followAPI(data) {\r\n  return axios.post(\"/api/follow\");\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(followAPI);\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n  return axios.post(\"/api/unfollow\");\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(unfollowAPI);\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn); //비동기 액션 크리에이터가 이벤트리스너같은 역할\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}