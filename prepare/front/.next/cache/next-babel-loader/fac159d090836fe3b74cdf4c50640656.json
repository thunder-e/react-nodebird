{"ast":null,"code":"import { all, fork, takeLatest, put, delay, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  }, {\n    withCredentials: true\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // POST reducer 조작부분\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    }); // USER reducer 조작부분\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","addPostAPI","data","post","content","withCredentials","addPost","action","result","id","generate","type","err","response","loadPostsAPI","get","loadPosts","removePostAPI","delete","removePost","console","error","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["D:/Document/react/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeLatest,\r\n  put,\r\n  delay,\r\n  throttle,\r\n  call,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  generateDummyPost,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\r\n    \"/post\",\r\n    { content: data },\r\n    {\r\n      withCredentials: true,\r\n    }\r\n  );\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/posts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n\r\n    yield put({\r\n      //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    }); // POST reducer 조작부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    }); // USER reducer 조작부분\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPosts),\r\n    fork(watchAddPost),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}