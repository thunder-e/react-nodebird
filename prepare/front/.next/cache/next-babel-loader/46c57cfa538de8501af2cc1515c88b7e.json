{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"김떤더\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      src: \"https://cdn.pixabay.com/photo/2022/07/03/22/00/cat-7300029_960_720.jpg\"\n    }, {\n      src: \"https://cdn.pixabay.com/photo/2017/02/20/18/03/cat-2083492_960_720.jpg\"\n    }, {\n      src: \"https://cdn.pixabay.com/photo/2021/11/12/03/04/woman-6787784_960_720.png\"\n    }],\n    Comment: [{\n      User: {\n        nickname: \"copy\"\n      },\n      content: \"고양이 귀여워요😊\"\n    }, {\n      User: {\n        nickname: \"연두\"\n      },\n      content: \"츄르 가져다줄까\"\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false\n};\n//다른 정보들과 함께 오는 데이터들은 대문자로 시작 - User, Image, Comment\n\nvar ADD_POST = \"ADD_POST\"; //변수로 따로 저장해두면 오타를 막을 수 있다.\nexport var addPost = {\n  type: ADD_POST\n};\nvar dummyPost = {\n  id: 2,\n  content: \"더미데이터입니다.\",\n  User: {\n    id: 1,\n    nickname: \"김떤더\"\n  },\n  Image: [],\n  Comment: []\n};\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        postAdded: true\n      });\n    default:\n      return _objectSpread({}, state);\n  }\n};\nexport default reducer;","map":{"version":3,"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comment","imagePaths","postAdded","ADD_POST","addPost","type","dummyPost","Image","reducer","state","action"],"sources":["D:/Document/react/react-nodebird/prepare/front/reducers/post.js"],"sourcesContent":["export const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"김떤더\",\r\n      },\r\n      content: \"첫 번째 게시글 #해시태그 #익스프레스\",\r\n      Images: [\r\n        {\r\n          src: \"https://cdn.pixabay.com/photo/2022/07/03/22/00/cat-7300029_960_720.jpg\",\r\n        },\r\n        {\r\n          src: \"https://cdn.pixabay.com/photo/2017/02/20/18/03/cat-2083492_960_720.jpg\",\r\n        },\r\n        {\r\n          src: \"https://cdn.pixabay.com/photo/2021/11/12/03/04/woman-6787784_960_720.png\",\r\n        },\r\n      ],\r\n      Comment: [\r\n        {\r\n          User: {\r\n            nickname: \"copy\",\r\n          },\r\n          content: \"고양이 귀여워요😊\",\r\n        },\r\n        {\r\n          User: {\r\n            nickname: \"연두\",\r\n          },\r\n          content: \"츄르 가져다줄까\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  postAdded: false,\r\n};\r\n//다른 정보들과 함께 오는 데이터들은 대문자로 시작 - User, Image, Comment\r\n\r\nconst ADD_POST = \"ADD_POST\"; //변수로 따로 저장해두면 오타를 막을 수 있다.\r\nexport const addPost = {\r\n  type: ADD_POST,\r\n};\r\n\r\nconst dummyPost = {\r\n  id: 2,\r\n  content: \"더미데이터입니다.\",\r\n  User: {\r\n    id: 1,\r\n    nickname: \"김떤더\",\r\n  },\r\n  Image: [],\r\n  Comment: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        mainPosts: [dummyPost, ...state.mainPosts],\r\n        postAdded: true,\r\n      };\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":";;;;AAAA,OAAO,IAAMA,YAAY,GAAG;EAC1BC,SAAS,EAAE,CACT;IACEC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE;MACJD,EAAE,EAAE,CAAC;MACLE,QAAQ,EAAE;IACZ,CAAC;IACDC,OAAO,EAAE,uBAAuB;IAChCC,MAAM,EAAE,CACN;MACEC,GAAG,EAAE;IACP,CAAC,EACD;MACEA,GAAG,EAAE;IACP,CAAC,EACD;MACEA,GAAG,EAAE;IACP,CAAC,CACF;IACDC,OAAO,EAAE,CACP;MACEL,IAAI,EAAE;QACJC,QAAQ,EAAE;MACZ,CAAC;MACDC,OAAO,EAAE;IACX,CAAC,EACD;MACEF,IAAI,EAAE;QACJC,QAAQ,EAAE;MACZ,CAAC;MACDC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC,CACF;EACDI,UAAU,EAAE,EAAE;EACdC,SAAS,EAAE;AACb,CAAC;AACD;;AAEA,IAAMC,QAAQ,GAAG,UAAU,CAAC,CAAC;AAC7B,OAAO,IAAMC,OAAO,GAAG;EACrBC,IAAI,EAAEF;AACR,CAAC;AAED,IAAMG,SAAS,GAAG;EAChBZ,EAAE,EAAE,CAAC;EACLG,OAAO,EAAE,WAAW;EACpBF,IAAI,EAAE;IACJD,EAAE,EAAE,CAAC;IACLE,QAAQ,EAAE;EACZ,CAAC;EACDW,KAAK,EAAE,EAAE;EACTP,OAAO,EAAE;AACX,CAAC;AAED,IAAMQ,OAAO,GAAG,SAAVA,OAAO,GAAqC;EAAA,IAAjCC,KAAK,uEAAGjB,YAAY;EAAA,IAAEkB,MAAM;EAC3C,QAAQA,MAAM,CAACL,IAAI;IACjB,KAAKF,QAAQ;MACX,uCACKM,KAAK;QACRhB,SAAS,GAAGa,SAAS,4BAAKG,KAAK,CAAChB,SAAS,EAAC;QAC1CS,SAAS,EAAE;MAAI;IAEnB;MACE,yBACKO,KAAK;EACR;AAER,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}