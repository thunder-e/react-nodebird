{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, SIGN_UP_SUCCESS, LOG_IN_FAILURE, LOG_OUT_FAILURE, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST } from \"../reducers/user\";\nfunction loginAPI(data) {\n  // 3. 전달된 후\n  return axios.post(\"/api/login\", data); //4. 넘겨줌\n}\n\nfunction* logIn(action) {\n  // 1. action에서\n  try {\n    yield delay(1000);\n    //const result = yield call(loginAPI, action.data); // 2. data를 꺼내어\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n// 성공결과 : result.data\n// 실패결과 : err.response.data\n\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    //const result = yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// API는 제너레이터가 아니라는 것 주의!!!!!\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\nfunction* signUp() {\n  try {\n    yield delay(1000);\n    //const result = yield call(logoutAPI);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); //비동기 액션 크리에이터가 이벤트리스너같은 역할\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","axios","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","SIGN_UP_SUCCESS","LOG_IN_FAILURE","LOG_OUT_FAILURE","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_OUT_REQUEST","SIGN_UP_REQUEST","loginAPI","data","post","logIn","action","type","err","error","response","logoutAPI","logOut","signUpAPI","signUp","watchLogin","watchLogOut","watchSignUp","userSaga","watchFollow","watchUnfollow"],"sources":["D:/Document/react/react-nodebird/prepare/front/sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_OUT_REQUEST,\r\n  SIGN_UP_REQUEST,\r\n} from \"../reducers/user\";\r\n\r\nfunction loginAPI(data) {\r\n  // 3. 전달된 후\r\n  return axios.post(\"/api/login\", data); //4. 넘겨줌\r\n}\r\n\r\nfunction* logIn(action) {\r\n  // 1. action에서\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(loginAPI, action.data); // 2. data를 꺼내어\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n// 성공결과 : result.data\r\n// 실패결과 : err.response.data\r\n\r\nfunction logoutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(logoutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// API는 제너레이터가 아니라는 것 주의!!!!!\r\nfunction signUpAPI() {\r\n  return axios.post(\"/api/signUp\");\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(logoutAPI);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn); //비동기 액션 크리에이터가 이벤트리스너같은 역할\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n  ]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,GAAG,EAAEC,KAAK,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,cAAc,EACdC,eAAe,EACfC,eAAe,EACfC,cAAc,EACdC,eAAe,EACfC,eAAe,EACfC,cAAc,EACdC,eAAe,EACfC,eAAe,QACV,kBAAkB;AAEzB,SAASC,QAAQ,CAACC,IAAI,EAAE;EACtB;EACA,OAAOX,KAAK,CAACY,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC,CAAC,CAAC;AACzC;;AAEA,UAAUE,KAAK,CAACC,MAAM,EAAE;EACtB;EACA,IAAI;IACF,MAAMf,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMD,GAAG,CAAC;MACRiB,IAAI,EAAEd,cAAc;MACpBU,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,MAAMlB,GAAG,CAAC;MACRiB,IAAI,EAAEX,cAAc;MACpBa,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACP;IACtB,CAAC,CAAC;EACJ;AACF;AACA;AACA;;AAEA,SAASQ,SAAS,GAAG;EACnB,OAAOnB,KAAK,CAACY,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUQ,MAAM,GAAG;EACjB,IAAI;IACF,MAAMrB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMD,GAAG,CAAC;MACRiB,IAAI,EAAEb;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOc,GAAG,EAAE;IACZ,MAAMlB,GAAG,CAAC;MACRiB,IAAI,EAAEV,eAAe;MACrBY,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACP;IACtB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASU,SAAS,GAAG;EACnB,OAAOrB,KAAK,CAACY,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUU,MAAM,GAAG;EACjB,IAAI;IACF,MAAMvB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMD,GAAG,CAAC;MACRiB,IAAI,EAAEZ;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOa,GAAG,EAAE;IACZ,MAAMlB,GAAG,CAAC;MACRiB,IAAI,EAAET,eAAe;MACrBW,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACP;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUY,UAAU,GAAG;EACrB,MAAM1B,UAAU,CAACU,cAAc,EAAEM,KAAK,CAAC,CAAC,CAAC;AAC3C;;AAEA,UAAUW,WAAW,GAAG;EACtB,MAAM3B,UAAU,CAACW,eAAe,EAAEY,MAAM,CAAC;AAC3C;AAEA,UAAUK,WAAW,GAAG;EACtB,MAAM5B,UAAU,CAACY,eAAe,EAAEa,MAAM,CAAC;AAC3C;AAEA,eAAe,UAAUI,QAAQ,GAAG;EAClC,MAAM/B,GAAG,CAAC,CACRC,IAAI,CAAC2B,UAAU,CAAC,EAChB3B,IAAI,CAAC4B,WAAW,CAAC,EACjB5B,IAAI,CAAC6B,WAAW,CAAC,EACjB7B,IAAI,CAAC+B,WAAW,CAAC,EACjB/B,IAAI,CAACgC,aAAa,CAAC,CACpB,CAAC;AACJ"},"metadata":{},"sourceType":"module"}