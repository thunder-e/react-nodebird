{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addPost\", data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // POST reducer 조작부분\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: id\n    }); // USER reducer 조작부분\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addCommentAPI, action.data);\n\n    const id = shortid.generate();\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","addPostAPI","data","post","addPost","action","type","id","content","err","response","removePostAPI","delete","removePost","generate","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/KIMJIHYE/workspace/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/addPost\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    }); // POST reducer 조작부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: id,\r\n    }); // USER reducer 조작부분\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addCommentAPI, action.data);\r\n\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: { id, content: action.data },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}