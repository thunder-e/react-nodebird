{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n//다른 정보들과 함께 오는 데이터들은 대문자로 시작 - User, Image, Comment\n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    id: shortId.generate(),\n    src: faker.image.image()\n  }],\n  Comments: [{\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\n\n//변수로 따로 저장해두면 오타를 막을 수 있다.\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n//동적 action creator : 액션을 그때그때 생성해줌\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"김떤더\"\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"김떤더\"\n  }\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        {\n          break;\n        }\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","addPostLoading","addPostDone","addPostError","loadPostsLoading","loadPostsDone","loadPostsError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","loadPostLoading","loadPostDone","loadPostError","concat","length","error","unshift","filter","v","post","find","postId"],"sources":["D:/Document/react/react-nodebird/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePosts: true,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n//다른 정보들과 함께 오는 데이터들은 대문자로 시작 - User, Image, Comment\r\n\r\nexport const generateDummyPost = (number) =>\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\n\r\n//변수로 따로 저장해두면 오타를 막을 수 있다.\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\n//동적 action creator : 액션을 그때그때 생성해줌\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"김떤더\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"김떤더\",\r\n  },\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.hasMorePosts = draft.mainPosts.length < 50;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      // const postIndex = state.mainPosts.findIndex(\r\n      //   (v) => v.id === action.data.postId\r\n      // );\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}