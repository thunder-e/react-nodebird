{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction loginAPI(data) {\n  // 3. 전달된 후\n  return axios.post(\"/api/login\", data); //4. 넘겨줌\n}\n\nfunction* logIn(action) {\n  console.log(\"saga login\");\n  // 1. action에서\n  try {\n    yield delay(1000);\n    //const result = yield call(loginAPI, action.data); // 2. data를 꺼내어\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n// 성공결과 : result.data\n// 실패결과 : err.response.data\n\nfunction logoutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    //const result = yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLogin() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn); //비동기 액션 크리에이터가 이벤트리스너같은 역할\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","axios","loginAPI","data","post","logIn","action","console","log","type","LOG_IN_SUCCESS","err","LOG_IN_FAILURE","error","response","logoutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogin","watchLogOut","userSaga"],"sources":["D:/Document/react/react-nodebird/prepare/front/sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction loginAPI(data) {\r\n  // 3. 전달된 후\r\n  return axios.post(\"/api/login\", data); //4. 넘겨줌\r\n}\r\n\r\nfunction* logIn(action) {\r\n  console.log(\"saga login\");\r\n  // 1. action에서\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(loginAPI, action.data); // 2. data를 꺼내어\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n// 성공결과 : result.data\r\n// 실패결과 : err.response.data\r\n\r\nfunction logoutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(logoutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn); //비동기 액션 크리에이터가 이벤트리스너같은 역할\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchLogOut)]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,GAAG,EAAEC,KAAK,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,CAACC,IAAI,EAAE;EACtB;EACA,OAAOF,KAAK,CAACG,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC,CAAC,CAAC;AACzC;;AAEA,UAAUE,KAAK,CAACC,MAAM,EAAE;EACtBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EACzB;EACA,IAAI;IACF,MAAMR,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMD,GAAG,CAAC;MACRU,IAAI,EAAEC,cAAc;MACpBP,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACZ,MAAMZ,GAAG,CAAC;MACRU,IAAI,EAAEG,cAAc;MACpBC,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACX;IACtB,CAAC,CAAC;EACJ;AACF;AACA;AACA;;AAEA,SAASY,SAAS,GAAG;EACnB,OAAOd,KAAK,CAACG,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUY,MAAM,GAAG;EACjB,IAAI;IACF,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMD,GAAG,CAAC;MACRU,IAAI,EAAEQ;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAON,GAAG,EAAE;IACZ,MAAMZ,GAAG,CAAC;MACRU,IAAI,EAAES,eAAe;MACrBL,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACX;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUgB,UAAU,GAAG;EACrB,MAAMrB,UAAU,CAAC,gBAAgB,EAAEO,KAAK,CAAC,CAAC,CAAC;AAC7C;;AAEA,UAAUe,WAAW,GAAG;EACtB,MAAMtB,UAAU,CAAC,iBAAiB,EAAEkB,MAAM,CAAC;AAC7C;AAEA,eAAe,UAAUK,QAAQ,GAAG;EAClC,MAAMzB,GAAG,CAAC,CAACC,IAAI,CAACsB,UAAU,CAAC,EAAEtB,IAAI,CAACuB,WAAW,CAAC,CAAC,CAAC;AAClD"},"metadata":{},"sourceType":"module"}