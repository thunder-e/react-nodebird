{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(addPost),\n  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(loadPosts),\n  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(removePost),\n  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(addComment),\n  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddPost),\n  _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(watchLoadPosts),\n  _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(watchRemovePost),\n  _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddComment),\n  _marked9 = /*#__PURE__*/_regeneratorRuntime().mark(postSaga);\nimport { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addPost\", data);\n}\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime().wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n        case 3:\n          //const result = yield call(addPostAPI, action.data);\n          id = shortid.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n        case 8:\n          _context.next = 14;\n          break;\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\nfunction loadPosts(action) {\n  var id;\n  return _regeneratorRuntime().wrap(function loadPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n        case 3:\n          //const result = yield call(addPostAPI, action.data);\n          id = shortid.generate();\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n        case 8:\n          _context2.next = 14;\n          break;\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/api/post\", data);\n}\nfunction removePost(action) {\n  return _regeneratorRuntime().wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n        case 3:\n          _context3.next = 5;\n          return put({\n            //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n        case 7:\n          _context3.next = 14;\n          break;\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\nfunction addComment(action) {\n  return _regeneratorRuntime().wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n        case 5:\n          _context4.next = 11;\n          break;\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context4.t0.response.data\n          });\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\nfunction watchAddPost() {\n  return _regeneratorRuntime().wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nfunction watchLoadPosts() {\n  return _regeneratorRuntime().wrap(function watchLoadPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nfunction watchRemovePost() {\n  return _regeneratorRuntime().wrap(function watchRemovePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\nfunction watchAddComment() {\n  return _regeneratorRuntime().wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\nexport default function postSaga() {\n  return _regeneratorRuntime().wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"names":["addPost","loadPosts","removePost","addComment","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga","all","fork","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","LOAD_POSTS_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","addPostAPI","data","post","action","id","generate","type","content","response","loadPostsAPI","get","removePostAPI","console","error","addCommentAPI","postId"],"sources":["D:/Document/react/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  LOAD_POSTS_REQUEST,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/addPost\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/posts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addPostAPI, action.data);\r\n\r\n    yield put({\r\n      //액션이 두개인 이유 : post reducer상태와 user reducer상태를 동시에 한번에 바꿀수 없기 떄문에 액션을 두번하여 바꿔줌\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    }); // POST reducer 조작부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    }); // USER reducer 조작부분\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}