{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var disatch = _ref.disatch,\n    getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n};\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTest = sagaMiddleware.run(rootSaga);\n  store.dispatch({\n    type: \"CHANGE_NAME\",\n    data: \"thun\"\n  });\n  return store;\n};\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","disatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTest","run","dispatch","type","data","wrapper","debug"],"sources":["D:/Document/react/react-nodebird/prepare/front/store/configureStore.js"],"sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport reducer from \"../reducers\";\r\nimport rootSaga from \"../sagas\";\r\n\r\nconst loggerMiddleware =\r\n  ({ disatch, getState }) =>\r\n  (next) =>\r\n  (action) => {\r\n    console.log(action);\r\n    return next(action);\r\n  };\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware, loggerMiddleware];\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTest = sagaMiddleware.run(rootSaga);\r\n\r\n  store.dispatch({\r\n    type: \"CHANGE_NAME\",\r\n    data: \"thun\",\r\n  });\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === \"development\",\r\n});\r\nexport default wrapper;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,WAAW,EAAEC,OAAO,EAAEC,eAAe,QAAQ,OAAO;AAC7D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,oBAAoB,MAAM,YAAY;AAE7C,OAAOC,OAAO,MAAM,aAAa;AACjC,OAAOC,QAAQ,MAAM,UAAU;AAE/B,IAAMC,gBAAgB,GACpB,SADIA,gBAAgB;EAAA,IACjBC,OAAO,QAAPA,OAAO;IAAEC,QAAQ,QAARA,QAAQ;EAAA,OACpB,UAACC,IAAI;IAAA,OACL,UAACC,MAAM,EAAK;MACVC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnB,OAAOD,IAAI,CAACC,MAAM,CAAC;IACrB,CAAC;EAAA;AAAA;AAEH,IAAMG,cAAc,GAAG,SAAjBA,cAAc,GAAS;EAC3B,IAAMC,cAAc,GAAGX,oBAAoB,EAAE;EAC7C,IAAMY,WAAW,GAAG,CAACD,cAAc,EAAER,gBAAgB,CAAC;EACtD,IAAMU,QAAQ,GACZ,QACIhB,OAAO,CAACC,eAAe,eAAIc,WAAW,CAAC,CAAC,GACxCb,mBAAmB,CAACD,eAAe,eAAIc,WAAW,CAAC,CAAC;EAC1D,IAAME,KAAK,GAAGlB,WAAW,CAACK,OAAO,EAAEY,QAAQ,CAAC;EAC5CC,KAAK,CAACC,QAAQ,GAAGJ,cAAc,CAACK,GAAG,CAACd,QAAQ,CAAC;EAE7CY,KAAK,CAACG,QAAQ,CAAC;IACbC,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,OAAOL,KAAK;AACd,CAAC;AAED,IAAMM,OAAO,GAAGzB,aAAa,CAACe,cAAc,EAAE;EAC5CW,KAAK;AACP,CAAC,CAAC;AACF,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}